#!/usr/bin/env node
const program = require('commander');
const logger = require('../lib/log');
const path = require('path');
const fs = require('fs');
const fse = require('fs-extra');
const plusString = require('node-plus-string');
const generateViewRouter = require('../lib/view/index');
const watch = require('watch');

let componentName = null;
const ROOT_PATH = process.cwd();
const ROUTER_PATH = path.join(ROOT_PATH, 'src/routers/index.js');

program.on('--help', function () {
  console.log(' Examples:');
  console.log();
  console.log('    $ x view card -o src/views -c group');
});

program
  .usage('<component-name>')
  .arguments('<component-name>')
  .action((name) => {
    componentName = name;
  })
  .option('-o, --output <output>', '输出的路径。默认为src/views')
  // @todo -c 参数非必须
  .option('-c, --component-cate <component-cate>', '页面组件的分类目录')
  // .option('-t, --template <template>', '使用的模板。默认为tempate/view.tpl')
  .option('-f, --force', '是否强制覆盖')
  .parse(process.argv);


if (!componentName) {
  logger.error('请输入组件。例: x-select|x-select.vue');
  program.help();
  process.exit(1);
}

// @todo 修改为对象，方便统一传参
const tplRouterPath = path.join(__dirname, '../template/router.tpl');
let routerContent = fs.readFileSync(tplRouterPath, 'utf-8');

if (fs.existsSync(ROUTER_PATH)) {
  routerContent = fs.readFileSync(ROUTER_PATH, 'utf-8');
}

// @todo 指定模板
const tplViewPath = path.join(__dirname, '../template/view.tpl');
const tplViewContent = fs.readFileSync(tplViewPath, 'utf-8');

if (path.extname(componentName)) {
  componentName = path.basename(componentName, '.vue');
}

let output = 'src/views';
if (program.output) {
  output = program.output;
}
let componentCate = '';

if (program.componentCate) {
  componentCate = program.componentCate;
}

const outputVueFilePath = path.join(ROOT_PATH, output, componentCate, componentName + '.vue');

// if (!fs.existsSync(outputVueFilePath) && !program.force) {
//   console.error('文件夹路径不存在，请使用\'-f\' 或者 \'--force\'');
//   process.exit(1);
// }

if (fs.existsSync(outputVueFilePath) && !program.force) {
  console.error('组件已经存在');
  process.exit(1);
}
// @todo 文件是否存在

watch.watchTree(path.join(ROOT_PATH, output), function (f, curr, prev) {
  // console.log('curr', curr);
  // console.log('prev', prev);
  if (typeof f == "object" && prev === null && curr === null) {
    // Finished walking the tree
  } else if (prev === null) {
    generateViewRouter(path.join(ROOT_PATH, output));
    // f is a new file
  } else if (curr.nlink === 0) {
    generateViewRouter(path.join(ROOT_PATH, output));
    // f was removed
  } else {
    generateViewRouter(path.join(ROOT_PATH, output));
    // f was changed
  }
  // generateViewRouter(path.join(ROOT_PATH, output));
});

fse.outputFile(outputVueFilePath, tplViewContent, (error) => {
  if (error) {
    logger.error(`写入${outputVueFilePath}失败`);
    return;
  }
  generateViewRouter(path.join(ROOT_PATH, output));

  // @todo componentCate == '' 的情况
  // const insertImport = `const ${getImportName()} = () => import('${getViewsPath()}');\n\nVue.use(Router);`;
  // let routerContentAfter = routerContent;
  // if (routerContent.indexOf(insertImport) < 0){
  //   routerContentAfter = routerContent
  //     .replace('\nVue.use(Router);', function() {
  //       return insertImport;
  //     });
  // }
  // fse.outputFileSync(ROUTER_PATH, routerContentAfter, 'utf-8');
});


function getImportName() {
  return plusString.classify(componentCate) + plusString.classify(componentName);
}
function getViewsPath(vueFilePath) {
  return path.join(output.replace('src/', ''), componentCate, componentName);
}

// console.log(process.argv);
// console.log(componentName);
// console.log(program.output);
// console.log(program.componentPath);
// console.log(program.template);
// console.log(program.force);
