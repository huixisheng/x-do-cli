#!/usr/bin/env node
const path = require('path');
const fs = require('fs');
const program = require('commander');
const fse = require('fs-extra');
const plusString = require('node-plus-string');
const watch = require('watch');
const logger = require('../lib/log');

const generateComponentRouter = require('../lib/component/index');

let componentName = null;
const ROOT_PATH = process.cwd();

program.on('--help', function () {
  console.log('\n  Examples:');
  console.log();
  console.log('  $ x component card -o src/components -c group');
});

program
  .usage('<component-name>')
  .arguments('<component-name>')
  .action((name) => {
    // vue 组件首字母大写
    componentName = plusString.capitalize(name);
  })
  .option('-o, --output <output>', '输出的路径。默认为src/components')
  // @TODO -c 参数非必须
  .option('-c, --component-cate <component-cate>', '页面组件的分类目录。必填参数')
  .option('-f, --force', '是否强制覆盖')
  .option('-w, --watch', '是否开启文件监测')
  .option('--debug', '输出调试信息')
  .parse(process.argv);

if (program.debug) {
  process.env.NODE_ENV = 'development';
}

let output = 'src/components';

logger.debug('process.argv', process.argv);
logger.debug('program', program);

if (!componentName) {
  logger.error('请输入组件。例: Xselect|SelectItem.vue\n');
  generateComponentRouter(path.join(ROOT_PATH, output));
  program.help();
  process.exit(1);
}

// @todo 指定模板
const tplViewPath = path.join(__dirname, '../template/component.tpl');
const tplViewContent = fs.readFileSync(tplViewPath, 'utf8');

if (path.extname(componentName)) {
  componentName = path.basename(componentName, '.vue');
}

if (program.output) {
  output = program.output;
}
let componentCate = '';

if (program.componentCate) {
  componentCate = program.componentCate;
}

const outputVueFilePath = path.join(ROOT_PATH, output, componentCate, componentName + '.vue');

if (fs.existsSync(outputVueFilePath) && !program.force) {
  console.error(`components/${componentCate}/${componentName}.vue is exist.`);
  generateComponentRouter(path.join(ROOT_PATH, output));
  process.exit(1);
}

if (program.watch) {
  logger.log('watching...');
  watch.watchTree(path.join(ROOT_PATH, output), function (f, curr, prev) {
    logger.debug('curr', curr);
    logger.debug('prev', prev);

    // 写法虽然可以优化，但是这样对于watch用法清晰点
    if (typeof f == "object" && prev === null && curr === null) {
      // Finished walking the tree
    } else if (prev === null) {
      generateComponentRouter(path.join(ROOT_PATH, output));
      // f is a new file
    } else if (curr.nlink === 0) {
      generateComponentRouter(path.join(ROOT_PATH, output));
      // f was removed
    } else {
      generateComponentRouter(path.join(ROOT_PATH, output));
      // f was changed
    }
  });
}

fse.outputFile(outputVueFilePath, tplViewContent, {
  encoding: 'utf8',
},(error) => {
  if (error) {
    logger.error('write fail. ', outputVueFilePath);
    return;
  }
  generateComponentRouter(path.join(ROOT_PATH, output));
});