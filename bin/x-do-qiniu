#!/usr/bin/env node

const program = require('commander');
const qn = require('qn');
const path = require('path');
const fs = require('fs');
const xConfig = require('x-config-deploy').getConfig();
const walkSync = require('walk-sync');
// http://jo2.org/nodejs-copy-text-to-clipboard/
// https://stackoverflow.com/questions/7778539/copy-to-clipboard-in-node-js
const clipboardy = require('clipboardy');
const eTag = require('../lib/qiniu/etag');
const logger = require('../lib/log');


const qiniuConfig = Object.assign(xConfig.qiniuConfig);
const qnClient = qn.create(qiniuConfig);

const ROOT_PATH = process.cwd();

program.on('--help', function () {
  console.log(' Examples:');
  console.log();
  console.log('    $ x-do-qiniu filepath');
});

// TODO 同命文件删除并刷新缓存
program
  // .usage('<component-name>')
  // .arguments('<component-name>')
  // .action((name) => {
  //   componentName = name;
  // })
  // .option('-o, --output <output>', '输出的路径。默认为src/components')
  .option('-k, --key', '是否自定义上传七牛的key')
  .parse(process.argv);

if (!program.args.length) {
  logger.error('请输入上传的资源');
  program.help();
  process.exit(1);
}

const uploadFiles = getFileList(program.args);
const isCustomKey = program.key;

const promises = uploadFiles.map((file) => {
  return uploadFilePromise(file, isCustomKey);
});
Promise.all(promises).then((result) => {
  console.log('上传的文件: ');
  result.forEach((item) => {
    console.log(item.url);
  });
  // console.log(result);
  clipboardy.writeSync(JSON.stringify(result));
}).catch(() => {

});
// uploadFiles.forEach((file) => {
//   console.log(file);
//   qnClient.upload(fs.createReadStream(file), (error, result) => {
//     console.log(result);
//   });
// });

function uploadFilePromise(file, isCustomKey) {
  var promise = new Promise((resolve, reject) => {
    const params = {
      key: file.replace(ROOT_PATH, ''),
      insertOnly: 0,
    };
    if (!isCustomKey) {
      delete params.key;
    }
    qnClient.uploadFile(file, params, (error, result) => {
      if (error) {
        reject(error);
        return;
      }
      resolve(result);
    });
    // qnClient.upload(fs.createReadStream(file), (error, result) => {
    //   if (error) {
    //     reject(error);
    //     return;
    //   }
    //   resolve(result);
    // });
  });
  return promise;
}

function getFileList(args) {
 if (!Array.isArray(args)) {
  if (fs.existsSync(args)) {
    args = [args];
  } else {
    logger.error('参数有误');
  }
 }
 let fileList = [];

 args.forEach((value) => {
    let projectPath;
    if (path.isAbsolute(value)) {
      projectPath = value;
    } else {
      projectPath = path.join(process.cwd(), value);
    }

    let walkfiles = [];
    if (fs.existsSync(projectPath)) {
      if (fs.statSync(projectPath).isFile()) {
        walkfiles.push(projectPath);
      } else {
        walkfiles = walkSync(projectPath, {
          directories: true,
          ignore: ['.DS_Store', '*.exe', '*.dmg', '*.app'],
          globs: ['**/*.js', '**/*.css', '**/*.html', '**/*.jpg', '**/*.jpeg', '**/*.png', '**/*.gif', '**/*.svg']
          // globs: ['**/*.(jpg|png|jpeg|gif|js|css|html)']
        }).map((value) => {
          return path.join(projectPath, value);
        });
      }
      fileList = fileList.concat(walkfiles);
    }
 });

 return fileList;
}

// console.log(program.args);
// console.log(program.output);
// console.log(ROOT_PATH);
// console.log(uploadFiles);

/*
x-do-qiniu -p src/ -t [hash/name] --output [image-json.json, image-json.js] --min
x-do-qiniu src


.css,.js,.html

.exe,.dmg

.cache @todo

.x-do
  .cache
    x-do-qiniu.json

a.jpg -> http:com/xxx 45x46

hash:
{
  'hash': '',
  'name': '',
  'width': '',
  'height': ''
}
*/